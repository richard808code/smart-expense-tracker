package cz.smartexpensetracker.smart_expense_tracker.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Data
@Entity
public class Budget {

    // Primary key of Budget entity, autogenerated UUID
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private UUID id;

    // Name of the budget, must not be blank
    @NotBlank(message = "Budget name must not be blank")
    private String name;

    // Limit amount for the budget, minimum value is 0.01
    @DecimalMin(value = "0.01", message = "The limit amount must be greater than 0!")
    private BigDecimal limitAmount;

    // Many-to-one relationship to User entity, eagerly fetched
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "user_id", nullable = false)
    @JsonBackReference(value = "user-budgets") // Prevents cyclic JSON serialization
    private User user;

    // Many-to-one relationship to Category entity, eagerly fetched
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "category_id", nullable = false)
    @JsonIgnoreProperties("budgets") // Ignores 'budgets' property during JSON serialization to avoid cycles
    private Category category;

    // One-to-many relationship to Transaction entity, cascades all operations and removes orphans
    @OneToMany(mappedBy = "budget", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnoreProperties("budget") // Prevents cyclic JSON serialization
    private List<Transaction> transactions = new ArrayList<>();

    // Transient field, not stored in database, used to hold the remaining budget amount
    @Transient
    private double remainingAmount;

    // Expose remainingAmount in JSON serialization despite being transient
    @JsonProperty
    public double getRemainingAmount() {
        return remainingAmount;
    }

    // Setter for remainingAmount
    public void setRemainingAmount(double remainingAmount) {
        this.remainingAmount = remainingAmount;
    }
}